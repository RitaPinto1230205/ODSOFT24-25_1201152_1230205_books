pipeline {
    agent any

    environment {
        MAVEN_HOME = '/opt/homebrew'
        DOCKER_HOST = 'unix:///var/run/docker.sock'
        DOCKER_BINARY = '/usr/local/bin/docker'
        SERVER_PORT = '2226'
        IMAGE_NAME = 'ghcr.io/ritapinto1230205/lmsbooks'
        IMAGE_TAG = 'latest'
        GITHUB_TOKEN_ID = 'GITHUB_TOKEN'
        DEPLOYMENT_APPROVED = false
    }

    stages {
          stage('Install Java 21.0.4-amzn with SDKMAN!') {
                        steps {
                            script {
                                sh '''
                                    # Instalar SDKMAN! (se necessário)
                                    if [ ! -d "$HOME/.sdkman" ]; then
                                      curl -s "https://get.sdkman.io" | bash
                                      source "$HOME/.sdkman/bin/sdkman-init.sh"
                                    fi
                                    # Instalar a versão do Java 21.0.4-amzn
                                    source "$HOME/.sdkman/bin/sdkman-init.sh"
                                    sdk install java 21.0.4-amzn || true  # Ignora se já estiver instalado
                                    sdk default java 21.0.4-amzn
                                '''
                            }
                        }
                    }

        stage('Check Out') {
            steps {
                echo 'Checking out the latest code...'
                checkout scm
            }
        }

        stage('Debug Environment') {
            steps {
                dir('lms-books') {
                    sh 'env'
                }
            }
        }

        stage('Check Docker') {
            steps {
                dir('lms-books') {
                    sh 'docker --version'
                }
            }
        }

        stage('Clean and Build Project') {
            steps {
                dir('lms-books') {
                    script {
                        sh """
                            ${MAVEN_HOME}/bin/mvn clean install
                        """
                    }
                }
            }
        }

        stage('Run Tests Against Container') {
                    steps {
                        dir('lms-books') {
                            script {
                                sh """
                                    ${MAVEN_HOME}/bin/mvn verify -Dtest.container.url=http://localhost:${SERVER_PORT}
                                """
                            }
                        }
                    }
                }


        stage('Push Docker Image') {
            steps {
                dir('lms-books') {
                    script {
                        withCredentials([string(credentialsId: GITHUB_TOKEN_ID, variable: 'GITHUB_TOKEN')]) {
                            if (isUnix()) {
                                sh """
                                    docker push ${IMAGE_NAME}:latest
                                """
                            } else {
                                bat """
                                    docker push ${IMAGE_NAME}:latest
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Scale Up and Down Services') {
            steps {
                script {

                    def scaling = input(
                        message: 'Specify scaling action and instances for book01 and book02:',
                        parameters: [

                            choice(
                                choices: ['Scale Up', 'Scale Down'],
                                description: 'Choose whether to scale up or scale down the services.',
                                name: 'scaleAction'
                            ),

                            string(
                                defaultValue: '4',
                                description: 'Number of instances for book01',
                                name: 'scaleBook01'
                            ),

                            string(
                                defaultValue: '4',
                                description: 'Number of instances for book02',
                                name: 'scaleBook02'
                            )
                        ]
                    )

                    echo "Scaling action: ${scaling.scaleAction}"
                    echo "Scaling services: book01=${scaling.scaleBook01}, book02=${scaling.scaleBook02}"

                    dir('lms-books') {
                        echo "Scaling down existing services..."
                        sh """
                            docker-compose -f docker-compose-test.yml down --remove-orphans
                        """

                         if (scaling.scaleAction == 'Scale Up') {
                            echo "Scaling up services..."
                            sh """
                                docker-compose -f docker-compose-test.yml up --scale book01=${scaling.scaleBook01} --scale book02=${scaling.scaleBook02} -d
                            """
                        } else if (scaling.scaleAction == 'Scale Down') {
                            echo "Scaling down services..."
                            sh """
                                docker-compose -f docker-compose-test.yml up --scale book01=0 --scale book02=0 -d
                            """
                        }
                    }
                }
            }
        }



         stage('Wait for Manual Approval') {
                    steps {
                        input message: 'Deployment is ready. Do you want to continue?', parameters: [
                            booleanParam(defaultValue: false, description: 'Approve deployment?', name: 'DeployApproval')
                        ]
                        script {
                            DEPLOYMENT_APPROVED = params.DeployApproval
                        }
                    }
                }

         stage('Deploy with Docker Compose') {
                   steps {
                   dir('lms-books') {
                       script {
                           sh """

                               if ! docker ps --filter "name=rabbitmq_in_lms_network" --format '{{.Names}}' | grep -q rabbitmq_in_lms_network; then
                                 docker compose -f docker-compose-rabbitmq+postgres.yml up -d
                               else
                                 echo "RabbitMQ container already running."
                               fi

                               if ! docker ps --filter "name=postgres_in_lms_network" --format '{{.Names}}' | grep -q postgres_in_lms_network; then
                                 docker compose -f docker-compose-rabbitmq+postgres.yml up -d
                               else
                                 echo "Postgres container already running."
                               fi


                               docker compose -f docker-compose.yml up -d --force-recreate

                           """
                       }
                   }
                   }
               }
           }


    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }

    }
}
