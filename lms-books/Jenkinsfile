pipeline {
    agent any

    environment {
        MAVEN_HOME = '/opt/homebrew'
        DOCKER_HOST = 'unix:///var/run/docker.sock'
        DOCKER_BINARY = '/usr/local/bin/docker'
        SERVER_PORT = '2226'
        IMAGE_NAME = 'ghcr.io/ritapinto1230205/lmsbooks'
        IMAGE_TAG = 'latest'
        GITHUB_TOKEN_ID = 'GITHUB_TOKEN'
        DEPLOYMENT_APPROVED = false
    }

    stages {
        stage('Install Java 21.0.4-amzn with SDKMAN!') {
            steps {
                script {
                    sh '''
                        if [ ! -d "$HOME/.sdkman" ]; then
                          curl -s "https://get.sdkman.io" | bash
                          source "$HOME/.sdkman/bin/sdkman-init.sh"
                        fi
                        source "$HOME/.sdkman/bin/sdkman-init.sh"
                        sdk install java 21.0.4-amzn || true
                        sdk default java 21.0.4-amzn
                    '''
                }
            }
        }

        stage('Check Out') {
            steps {
                echo 'Checking out the latest code...'
                checkout scm
            }
        }

        stage('Debug Environment') {
            steps {
                dir('lms-books') {
                    sh 'env'
                }
            }
        }

        stage('Check Docker') {
            steps {
                dir('lms-books') {
                    sh 'docker --version'
                }
            }
        }

        stage('Clean and Build Project') {
            steps {
                dir('lms-books') {
                    script {
                        sh """
                            ${MAVEN_HOME}/bin/mvn clean install
                        """
                    }
                }
            }
        }

        stage('Run Tests Against Container') {
            steps {
                dir('lms-books') {
                    script {
                        sh """
                            ${MAVEN_HOME}/bin/mvn verify -Dtest.container.url=http://localhost:${SERVER_PORT}
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('lms-books') {
                    script {
                        withCredentials([string(credentialsId: GITHUB_TOKEN_ID, variable: 'GITHUB_TOKEN')]) {
                            sh """
                                echo \$GITHUB_TOKEN | docker login ghcr.io -u RitaPinto1230205 --password-stdin
                                docker build -t ${IMAGE_NAME}:latest .
                            """
                        }
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                dir('lms-books') {
                    script {
                        withCredentials([string(credentialsId: GITHUB_TOKEN_ID, variable: 'GITHUB_TOKEN')]) {
                            sh """
                                docker push ${IMAGE_NAME}:latest
                            """
                        }
                    }
                }
            }
        }

        stage('Wait for Manual Approval') {
            steps {
                input message: 'Deployment is ready. Do you want to continue?', parameters: [
                    booleanParam(defaultValue: false, description: 'Approve deployment?', name: 'DeployApproval')
                ]
                script {
                    DEPLOYMENT_APPROVED = params.DeployApproval
                }
            }
        }

        stage('Deploy with Rolling Updates') {
            steps {
                dir('lms-books') {
                    script {
                        sh '''
                            docker-compose pull
                            docker-compose up -d --no-deps --build
                            until [ "$(docker inspect --format='{{json .State.Health.Status}}' $(docker-compose ps -q lmsbooks))" == '"healthy"' ]; do
                                echo "Waiting for container to be healthy..."
                                sleep 5
                            done
                            echo "Service updated with no downtime!"
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
